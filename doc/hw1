1. Command Line Parsing

과제 목표 :  커맨드 라인 파싱 기능 구현.
1) 커맨드 라인을 파싱
2) 커맨드 라인 파싱을 토대로 프로그램 이름과 인자를 구분하여 스택에 저장.

현재의 pintos는 커맨드 라인을 파싱하지 않아서 제대로 된 파일을 실행할 수 없다.
따라서 기존에 있는 strtok_r함수를 이용하여 커맨드 라인을 파싱하였다.
제일 처음 커맨드 라인을 사용하는 process_execute함수에서 fn_copy를 이용해 커맨드 라인의 데이터가 손상되지 않도록 구현하였다.
이 때 fn_copy의 해제가 이루어지지 않는데, 이는 start_process함수에서도 사용하기 위함이다.
start_process함수에서 다 사용하고 나면 그 때 메모리 해제를 해 준다.
argument_stack함수는 파싱된 커맨드 라인을 토대로 스택에 저장하는 기능을 한다.

2. System Call

과제 목표 : 시스템 콜 핸들러 및 시스템 콜 구현
1) 현재 핀토스는 시스템 콜 핸들러가 구현되어 있지 않음
   -> 시스템 콜 핸들러 구현
2) 시스템 콜(halt, exit, create, remove) 구현 후 시스템 콜 핸들러를 통해 호출

우선 check_address라는 함수를 만들어서 참조하고자 하는 주소의 영역이 유저스택 영역인지 확인을 한다. 
이는 다른 함수들에서 포인터를 참조할 때 반드시 한번은 실행시켜주어야 한다.
get_argument함수는 argument_stack을 통해 스택에 저장되어 있는 인자들을 커널로 저장하는 함수이다.
스택이 유저스택안에 있는 지 확인한 후 arg에 차례대로 저장해준다.
이 때 처음 esp는 syscall number이기 때문에 4바이트를 더한 인자부터 저장한다.

시스템 콜 핸들러는 우선 esp에서 syscall number를 확인한 후 switch문으로 각각의 함수를 실행시킨다.
이 때 함수마다 인자의 개수가 다르므로 반드시 함수에 맞게 인자개수를 전달해 주어야 한다.
halt는 강제 종료로서 기존 shutdown_power_off함수로 종료한다.
exit는 종료로서 종료 상태를 저장하고 thread_exit을 호출한다.
create는 파일을 생성으로 filesys_create을 호출한다.
remove는 파일 삭제로 filesys_remove를 호출한다.

3. Hierarchical Process Structure

과제 목표 : 프로세스간의 부모와 자식관계를 구현하고, 부모가 자식프로세스의 종료를 대기하는 기능 구현

1) 부모와 자식 관계를 명시
2) 자식 프로세스의 정보를 저장하여 부모가 자식이 종료될때까지 종료되지 않도록 만듬
3) exec, wait함수 구현

부모와 자식 관계를 명시하기 위해 list와 list_elem구조체를 이용하였다.
자식 프로세스에 부모 프로세스의 디스크립터를 저장하였다.
thread구조체에 프로세스의 정보를 저장하였다. 그리고 세마포어를 추가하였다.

exec는 자식 프로세스를 생성하고 프로그램을 실행시키는 시스템 콜이다.
이 때, 부모 프로세스는 자식 프로세스가 메모리에 탑재 될 때까지 대기하여야 한다.
따라서 sema_down을 통해 자식이 로드가 끝날 때까지 대기한다.
start_process에서는 sema_up을 통해 자식이 로드가 끝났음을 알린다.

wait은 자식 프로세스가 모두 종료될 때까지 대기한다.
따라서 wait에서 호출하는 process_wait은 sema_down을 통해 자식이 종료될 때까지 기다린다.
thread_exit에서 sema_up을 통해 자식이 종료되었음을 부모에게 알린다.

4. File Descriptor

과제 목표 : 파일 디스크립터 및 관련 시스템 콜 구현

1) 핀토스에서의 파일 입출력을 위해 파일 디스크립터 구현이 필요
2) open, filesize, read, write, seek, tell, close구현

우선 thread 구조체에 file descriptor table(fdt)를 선언하였다.
fd는 2부터 최대 64까지 가질 수 있다.
open은 파일을 열 때 이용한다. 이 때 open중 파일 변경을 막기 위해 lock을 걸어주고 open이 끝나면 해제한다.
filesize는 파일의 크기를 알려준다.
read는 버퍼에서 데이터를 읽는데, 우선 버퍼가 유효한 값인지 확인을 해야한다. 그 후 읽는동안 파일 변경을 막기 위해 lock을 걸고 끝나면 해제한다.
write는 데이터를 기록하는데, 우선 버퍼가 유효한지 확인을 해야한다. 그 후 읽는동안 파일 변경을 막기 위해 lock을 걸고 끝나면 해제한다.
seek은 offset을 이동한다. file_seek이라는 함수를 호출한다.
tell은 열린 파일의 offset을 알려준다. file_tell이라는 함수를 호출한다.
close는 열린 파일을 단는다. file_close함수를 호출하고, file_descriptor를 제거한다.

5. Denying Write to Executable

과제 목표 : 실행 중인 사용자 프로세스의 프로그램 파일에 다른 프로세스가 데이터를 기록하는 것을 방지

1) 실행중인 프로세스의 프로그램 파일에 대한 쓰기 접근을 막아야 한다.

file_deny_write함수를 통해 열린 파일의 데이터가 변경되는 것을 막는데, 이는 파일을 여는 load함수에서 호출한다.
file_allow_write함수는 파일의 데이터가 변경되는 것을 허락하는데, 파일이 닫히는 file_close함수에서 호출한다.
